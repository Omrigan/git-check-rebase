#!/usr/bin/env python3

import sys
import tabulate

from check_rebase_meta import Meta
from span import Span
from compare_ranges import CommitRange, git_range_diff_table
from compare_commits import vimdiff_commits
from simple_git import git_log1
from tempfile import mkstemp

tabulate.PRESERVE_WHITESPACE = True


def print_legend(ranges, html):
    def_col = (
        ('bug-critical', 'Critical bugs'),
        ('matching', 'Matching, checked automatically'),
        ('checked', 'Matching, checked by hand'),
        ('drop', 'Dropped patches'),
        ('bug', 'Jira issues, non-critical')
    )
    br = '<br>' if html else ''
    for col, desc in def_col:
        print(Span(f'███████ - {desc}', klass=col))
    for r in ranges:
        if r.name != r.git_range:
            print('{} = {}{}'.format(r.name, r.git_range, br))


def main(ranges, meta, html, jira, jira_issues, legend, columns,
         rows, interactive, color):
    if interactive and len(ranges) != 2:
        exit('--interactive supports only two ranges mode')

    meta_obj = Meta(meta) if meta else None

    rows_full = rows == 'all'
    cols_full = columns == 'full'
    if html:
        fmt = 'html'
    elif color is None:
        fmt = 'colored' if sys.stdout.isatty() else 'plain'
    else:
        fmt = 'colored' if color else 'plain'

    if len(ranges) == 2 and '..' in ranges[1] and \
            '..' not in ranges[0]:
        # No reason to search below ranges[2] base
        ranges[0] = ranges[1].split('..', 1)[0] + '..' + ranges[0]

    ranges = [CommitRange(r, meta_obj) for r in ranges]
    if jira_issues:
        assert jira is not None
        jira_issues = jira_issues.split(',')

    out = git_range_diff_table(ranges, meta_obj, jira, jira_issues, fmt,
                               headers=cols_full,
                               date_column=cols_full,
                               author_column=cols_full,
                               meta_column=cols_full,
                               rows_full=rows_full)

    created_meta = False
    if interactive:
        tab = out[1:] if cols_full else out
        col_ind = 1 if meta else 0

        if not meta:
            fd, meta = mkstemp()
            created_meta = True
            meta_obj = Meta(meta)

        for line_ind, line in enumerate(tab):
            a = line[col_ind]
            b = line[col_ind + 1]
            if not a or not a.text or a.klass in ('matching', 'checked'):
                continue

            subj = git_log1('%s', b)
            comment_fd, comment_path = mkstemp()
            with open(comment_fd, 'w') as f:
                f.write(meta_obj.get_comment(subj))

            code = vimdiff_commits(a.text, b.text, c2_ind=line_ind+1,
                                   comment_path=comment_path)
            with open(comment_path) as f:
                ok_pair = (a.text, b.text) if code == 200 else None
                meta_obj.update_meta(subj, f.read(), ok_pair)
            if code not in (0, 200):
                break

        # Regenerate output as meta was updated
        out = git_range_diff_table(ranges, meta_obj, jira, jira_issues, fmt,
                                   headers=cols_full,
                                   date_column=cols_full,
                                   author_column=cols_full,
                                   meta_column=cols_full,
                                   rows_full=rows_full)

    if html:
        print("""<!DOCTYPE html>
              <meta charset="utf-8"/>
              <style>
              body {
                 font-family: monospace;
              }
              </style>
              """)

    if legend:
        print_legend(ranges, html)

    if html:
        tablefmt = 'html'
    elif legend:
        tablefmt = 'simple'
    else:
        tablefmt = 'plain'
    print(tabulate.tabulate(out, tablefmt=tablefmt))

    if created_meta:
        print(f"""

Meta file is created: {meta}
You may use it with next run, specifying option --meta {meta}""")


if __name__ == '__main__':
    import argparse

    p = argparse.ArgumentParser(description="Compare git commit ranges")

    p.add_argument('ranges', metavar='range', nargs='+',
                   help='ranges to compare, '
                   'in form [<name>:]<git range or ref>')
    p.add_argument('--meta', help='optional, file with additional metadata')
    p.add_argument('--html', help='output in html format', action='store_true')
    p.add_argument('--jira-issues',
                   help='optional, comma-separated jira issues list')
    p.add_argument('--jira', help='user:password@server')
    p.add_argument('--legend', help='print legend', action='store_true')
    p.add_argument('--columns',
                   help='which columns to show in table: "short" is default. '
                   '"full" adds author and date columns and also column '
                   'headers', default='short')
    p.add_argument('--rows', choices=('all', 'short'),
                   help='which rows to show in table: "all" is default. '
                   '"short" omits rows where first column equal to the last '
                   'column', default='all')
    p.add_argument('--interactive',
                   help='do interactive comparison of not-equal commits. '
                   'For each commit to compare, vimdiff is started as a '
                   'subprocess. User should exit it successfully (by :qa) to '
                   'mark commits "ok", and with error (by :cq) to don\'t '
                   'mark commits "ok"', action='store_true')
    p.add_argument('--color',
                   help='Highlight results. By default does coloring only '
                   'when stdout is tty', action=argparse.BooleanOptionalAction,
                   default=None)

    args = p.parse_args()

    main(**vars(args))
