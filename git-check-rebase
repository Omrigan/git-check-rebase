#!/usr/bin/env python3

import os
import sys
import tabulate

import compare_ranges
from check_rebase_meta import Meta
from span import Span
from compare_ranges import CommitRange, CompRes, parse_range
from compare_commits import interactive_compare_commits
from tempfile import mkstemp

tabulate.PRESERVE_WHITESPACE = True


def print_legend(ranges, html):
    def_col = (
        ('bug-critical', 'Critical bugs'),
        ('matching', 'Matching, checked automatically'),
        ('checked', 'Matching, checked by hand'),
        ('drop', 'Dropped patches'),
        ('bug', 'Jira issues, non-critical')
    )
    br = '<br>' if html else ''
    for col, desc in def_col:
        print(Span(f'███████ - {desc}', klass=col))
    for r in ranges:
        if r.name != r.git_range:
            print('{} = {}{}'.format(r.name, r.git_range, br))


def main(ranges, meta, html, jira, jira_issues, legend, columns,
         rows, interactive, color, ignore_commit_messages,
         start_from, created_meta=False):
    if start_from:
        if not interactive:
            sys.exit('--start_from supported only in --interactive mode')

    if not meta:
        fd, meta = mkstemp()
        os.close(fd)
        created_meta = True

    try:
        meta_obj = Meta(meta)
    except OSError as e:
        sys.exit(f'Failed to open "{meta}": {e.strerror}')

    rows_full = rows == 'all'
    cols_full = columns == 'full'
    if html:
        fmt = 'html'
    elif color is None:
        fmt = 'colored' if sys.stdout.isatty() else 'plain'
    else:
        fmt = 'colored' if color else 'plain'

    _, default_base, _ = parse_range(ranges[-1])
    if default_base is None:
        sys.exit('Last range must contain ".." separator. You shouldn\'t '
                 'want print the whole branch.')
    range_objs = [CommitRange(r, meta=meta_obj,
                              default_base=default_base) for r in ranges]
    if jira_issues:
        assert jira is not None
        jira_issues = jira_issues.split(',')

    tab = compare_ranges.Table(range_objs, meta_obj)
    tab.do_comparison(ignore_commit_messages)
    if jira:
        tab.add_jira_info(jira, jira_issues)

    if interactive:
        for row_ind, row in enumerate(tab.rows):
            if row.commits[0] is None:
                base_ind = len(row.commits) - 1
                other_inds = range(base_ind)
            else:
                base_ind = 0
                other_inds = range(1, len(row.commits))

            base = row.commits[base_ind]
            assert base is not None

            if start_from == base.commit_hash:
                start_from = None

            stop = False
            for i in other_inds:
                c = row.commits[i]
                if c is None:
                    continue

                if start_from == c.commit_hash:
                    start_from = None
                if start_from is not None:
                    continue

                if c.comp != CompRes.NONE:
                    continue

                if base_ind == 0:
                    a, b = base, c
                else:
                    a, b = c, base

                res = interactive_compare_commits(a.commit_hash, b.commit_hash,
                                                  c2_ind=row_ind+1,
                                                  comment=row.get_comment())
                assert not res.equal  # that would be bug in compare_ranges
                if res.ok:
                    ok_pair = a.commit_hash, b.commit_hash
                    base.comp = CompRes.BASE
                    c.comp = CompRes.CHECKED
                else:
                    ok_pair = None
                meta_obj.update_meta(row.subject, res.comment, ok_pair)
                if res.stop:
                    stop = True
                    break

                restart_from = ''
                if res.c1 and res.c1 != a.commit_hash:
                    restart_from = res.c1
                if res.c2 and res.c2 != b.commit_hash:
                    restart_from = res.c2

                if restart_from:
                    main(ranges=ranges, meta=meta, html=html, jira=jira,
                         jira_issues=jira_issues, legend=legend,
                         columns=columns,
                         rows=rows, interactive=interactive, color=color,
                         ignore_commit_messages=ignore_commit_messages,
                         start_from=restart_from, created_meta=created_meta)
                    return
            if stop:
                break

    out = tab.to_spans(fmt=fmt, headers=cols_full, date_column=cols_full,
                       author_column=cols_full, meta_column=cols_full,
                       rows_full=rows_full)

    if html:
        print("""<!DOCTYPE html>
              <meta charset="utf-8"/>
              <style>
              body {
                 font-family: monospace;
              }
              </style>
              """)

    if legend:
        print_legend(range_objs, html)

    if html:
        tablefmt = 'html'
    elif legend:
        tablefmt = 'simple'
    else:
        tablefmt = 'plain'
    print(tabulate.tabulate(out, tablefmt=tablefmt))

    if created_meta:
        if os.stat(meta).st_size == 0:
            os.unlink(meta)
        else:
            print(f"""

Meta file is created: {meta}
You may use it with next run, specifying option --meta {meta}""")


if __name__ == '__main__':
    import argparse

    p = argparse.ArgumentParser(description="Compare git commit ranges")

    p.add_argument('ranges', metavar='range', nargs='+',
                   help='ranges to compare, '
                   'in form [<name>:]<git range or ref>')
    p.add_argument('--meta', help='optional, file with additional metadata')
    p.add_argument('--html', help='output in html format', action='store_true')
    p.add_argument('--jira-issues',
                   help='optional, comma-separated jira issues list')
    p.add_argument('--jira', help='user:password@server')
    p.add_argument('--legend', help='print legend', action='store_true')
    p.add_argument('--columns',
                   help='which columns to show in table: "short" is default. '
                   '"full" adds author and date columns and also column '
                   'headers', default='short')
    p.add_argument('--rows', choices=('all', 'short'),
                   help='which rows to show in table: "all" is default. '
                   '"short" omits rows where first column equal to the last '
                   'column', default='all')
    p.add_argument('--interactive',
                   help='do interactive comparison of not-equal commits. '
                   'For each commit to compare, vimdiff is started as a '
                   'subprocess. User should exit it successfully (by :qa) to '
                   'mark commits "ok", and with error (by :cq) to don\'t '
                   'mark commits "ok"', action='store_true')
    p.add_argument('--color',
                   help='Highlight results. By default does coloring only '
                   'when stdout is tty', action=argparse.BooleanOptionalAction,
                   default=None)
    p.add_argument('--ignore-commit-messages',
                   help='Ignore commit message when compare commits',
                   action='store_true')
    p.add_argument('--start-from', help='hash commit of right column to '
                   'start from for interactive check.')

    args = p.parse_args()

    main(**vars(args))
