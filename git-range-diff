#!/usr/bin/env python3

import sys
import tabulate

from meta import Meta
from span import Span
from compare_ranges import CommitRange, git_range_diff_table

tabulate.PRESERVE_WHITESPACE = True

def B(*args):
    '''stub for benchmark, see --bench option'''
    pass




def main(ranges, meta, html, jira, jira_issues, bench):
    if meta:
        meta = Meta(meta); B()

    fmt = 'html' if html else 'colored'

    ranges = [CommitRange(r, meta) for r in ranges]; B()
    if jira_issues:
        assert jira is not None
        jira_issues = jira_issues.split(',')

    out = git_range_diff_table(ranges, meta, jira, jira_issues, fmt,
                               bench_func=B); B()

    if html:
        print("""<!DOCTYPE html>
              <meta charset="utf-8"/>
              <style>
              body {
                 font-family: monospace;
              }
              </style>
              """)

    def_col = (
        ('bug-critical', 'Critical bugs'),
        ('matching', 'Matching, checked automatically'),
        ('checked', 'Matching, checked by hand'),
        ('drop', 'Dropped patches'),
        ('bug', 'Jira issues, non-critical')
    )
    br = '<br>' if html else ''
    for col, desc in def_col:
        print(Span(f'███████ - {desc}', klass=col))
    for r in ranges:
        if r.name != r.git_range:
            print('{} = {}{}'.format(r.name, r.git_range, br))

    B('something')
    print(tabulate.tabulate(out, tablefmt=('html' if html else 'simple')))


if __name__ == '__main__':
    import argparse

    p = argparse.ArgumentParser(description="Compare git commit ranges")

    p.add_argument('ranges', metavar='range', nargs='+',
                   help='ranges to compare, '
                   'in form [<name>:]<git range or ref>')
    p.add_argument('--meta', help='optional, file with additional metadata')
    p.add_argument('--html', help='output in html format', action='store_true')
    p.add_argument('--jira-issues', help='optional, comma-separated jira issues list')
    p.add_argument('--jira', help='user:password@server')
    p.add_argument('--bench', help='print self-benchmark results', action='store_true')

    args = p.parse_args()
    if args.bench:
        from benchit import BenchIt
        B = BenchIt()

    B('preparations')
    main(**vars(args))
    B('printing')
    if args.bench:
        B.display()
